#include <bits/stdc++.h>
using namespace std; 

int partition(int *arr, int start, int end) {
  int count=0; 

  int pivot=arr[start]; 
  for(int i=start+1; i<=end; i++) {
    if(pivot >= arr[i]) {
      count++; 
    }
  } 
  int pivotIndex=start+count;
  swap(arr[start], arr[pivotIndex]); 
  
  int i=start,j=end; 

  while((i < pivotIndex) && (j > pivotIndex)) {
    while(arr[i] <= pivot) {
      i++; 
    } 
    while(arr[j] > pivot) {
      j--; 
    } 
    if((i < pivotIndex) && (j > pivotIndex)){
    swap(arr[i], arr[j]); 
    i++; 
    j--; 
    }
  } 

  return pivotIndex; 
} 

void quickSort(int *arr, int start, int end) {
  // Base Case 
  if(start >= end) {
    return; 
  } 

  int index=partition(arr, start, end); 

  quickSort(arr, start, index-1); 
  quickSort(arr, index+1, end); 
} 

int main() {
    int arr[]={90, 7, 0, 80, 91, 2}; 

    quickSort(arr, 0, 5); 

    for(int i=0; i<6; i++) {
      cout << arr[i] << " "; 
    }
    return 0;
} 

// time complexity : best case : average case : o(nlogn) : worst case : o(n^2) 
// space complexity : o(n) 
